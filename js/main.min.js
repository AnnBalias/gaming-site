document.addEventListener("DOMContentLoaded", () => {
  new FridayNightFunkin();
});
class FridayNightFunkin {
  constructor() {
    (this.data = null), this.init();
  }
  async init() {
    try {
      this.setupGlobalErrorHandlers(),
        await this.loadData(),
        this.setupEventListeners(),
        this.renderContent(),
        this.initializeComponents();
    } catch (e) {}
  }
  setupGlobalErrorHandlers() {
    window.addEventListener("unhandledrejection", (e) => {
      (e.reason &&
        "string" == typeof e.reason &&
        window.EnvironmentHelpers?.shouldSilentFail(e.reason)) ||
        (e.reason &&
          "string" == typeof e.reason &&
          !e.reason.includes("YYGGames") &&
          e.reason.includes("is not a function")),
        e.preventDefault();
    }),
      window.addEventListener("error", (e) => {
        var t = e.message || "",
          a = e.filename || "";
        return window.EnvironmentHelpers?.shouldSilentFail(t) ||
          window.EnvironmentHelpers?.shouldSilentFail(a) ||
          t.includes("YYGGames") ||
          t.includes("is not a function") ||
          t.includes("Content Security Policy") ||
          t.includes("AudioContext") ||
          t.includes("must be resumed")
          ? (e.preventDefault(), !1)
          : void 0;
      }),
      document.addEventListener("securitypolicyviolation", (e) => {
        e.preventDefault();
      });
  }
  async loadData() {
    try {
      var a,
        o = null;
      let t = !1;
      for (a of ["data.json", "./data.json", "/data.json", "../data.json"])
        try {
          let e = new AbortController();
          var n = setTimeout(() => e.abort(), 5e3),
            o = await fetch(a, { signal: e.signal });
          if ((clearTimeout(n), o.ok)) {
            (this.data = await o.json()), (t = !0);
            break;
          }
        } catch (e) {
          continue;
        }
      if (!t)
        try {
          this.data = await this.loadDataWithXHR();
        } catch (e) {
          throw new Error("Failed to load data from all methods");
        }
      window.gameData = this.data;
    } catch (e) {
      (this.data = {
        meta: {
          title: "QuestSagaOnline.com - Rhythmic Music Battle",
          description: "Dive into crazy rhythms and extraordinary duels.",
          keywords:
            "questsagaonline, rhythm game, music game, dance game, battle, music",
        },
        header: {
          logo: { text: "QuestSaga", accent: "Online" },
          navigation: {
            home: "Home",
            game: "Play Now",
            howToPlay: "How to Play",
            news: "News",
            contact: "Contact",
          },
        },
        hero: {
          badge: "New Game",
          title: "QuestSagaOnline.com",
          description: "Dive into crazy rhythms and extraordinary duels.",
          actions: { playNow: "Play Now", howToPlay: "How to Play" },
          features: [
            { icon: "music", text: "Rhythmic Music" },
            { icon: "energy", text: "Fast Duels" },
            { icon: "gamepad", text: "Tournaments" },
          ],
          gamePreview: {
            title: "Preview",
            stats: {
              rating: { value: "4.8", label: "Rating" },
              players: { value: "10K+", label: "Players" },
              songs: { value: "50+", label: "Songs" },
            },
          },
        },
        game: {
          title: "Play Now",
          description: "Click the button to start the game",
          startButton: "Start Game",
        },
        playGame: {
          fullscreenButton: "Fullscreen",
          exitFullscreenButton: "Exit Fullscreen",
          iframe: { src: "game/", width: "720", height: "1280" },
        },
        howToPlay: {
          title: "How to Play",
          description: "Learn the game rules",
          steps: [
            {
              step: "1",
              title: "Choose a song",
              description: "Select your favorite song from the collection",
            },
            {
              step: "2",
              title: "Press arrows",
              description: "Press arrows in time with the beats",
            },
            {
              step: "3",
              title: "Stay in rhythm",
              description: "Keep the rhythm to score points",
            },
          ],
        },
        reviews: {
          title: "Player Reviews",
          description: "What players say about us",
          reviews: [
            {
              player: "Anna",
              rating: 5,
              comment: "Great game! Very exciting music.",
              avatar: "assets/images/avatar1.jpg",
            },
            {
              player: "Max",
              rating: 4,
              comment: "Good gameplay, but could use more songs.",
              avatar: "assets/images/avatar2.jpg",
            },
          ],
        },
        news: {
          title: "Latest News",
          description:
            "Stay up to date with the latest events and announcements",
          articles: [
            {
              id: 1,
              title: "New song added",
              excerpt: "Added a new exciting song to the collection",
              content:
                "We're excited to announce that a new exciting song has been added to the collection. Try it now!",
              image: "assets/images/post.jpg",
              date: "2025-01-15",
            },
            {
              id: 2,
              title: "Interface update",
              excerpt: "Improved user interface",
              content:
                "We've updated the game interface for a better user experience. Everything looks even better now!",
              image: "assets/images/post2.jpg",
              date: "2025-01-10",
            },
          ],
        },
        contact: {
          title: "Contact Us",
          description: "Have questions? Write to us!",
          info: {
            email: "support@questsagaonline.com",
            address: "123 Gaming Street, Sydney NSW 2000, Australia",
            phone: "+61 2 9123 4567",
          },
          form: {
            name: { label: "Name", placeholder: "Enter your name" },
            email: { label: "Email", placeholder: "Enter your email" },
            message: { label: "Message", placeholder: "Enter your message" },
            submit: "Send",
            sending: "Sending...",
            success: "Message sent successfully!",
            error: "Error sending message.",
          },
        },
        footer: {
          brand: { text: "QuestSaga", accent: "Online" },
          description: "The best rhythmic music game for all age groups.",
          sections: {
            game: {
              title: "Game",
              links: [
                { text: "Play Now", href: "#game" },
                { text: "How to Play", href: "#how-to-play" },
                { text: "Rules", href: "#rules" },
              ],
            },
            community: {
              title: "Community",
              links: [
                { text: "Discord", href: "https://discord.com", external: !0 },
                { text: "Twitter", href: "https://twitter.com", external: !0 },
                { text: "Forum", href: "#", external: !0 },
              ],
            },
            legal: {
              title: "Legal",
              links: [
                { text: "Terms of Service", href: "terms.html" },
                { text: "Privacy Policy", href: "privacy.html" },
                { text: "Cookie Policy", href: "cookies.html" },
              ],
            },
          },
          copyright: "Â© 2025 QuestSagaOnline.com. All rights reserved.",
        },
        cookieBar: {
          message: "We use cookies to improve your experience.",
          accept: "Accept",
          decline: "Decline",
        },
      }),
        (window.gameData = this.data);
    }
  }
  setupEventListeners() {
    let t = document.querySelector(".header__mobile-toggle"),
      a = document.querySelector(".mobile-menu");
    var e = document.querySelector(".mobile-menu__close"),
      o = document.querySelector(".mobile-menu__overlay"),
      e =
        (t &&
          a &&
          (t.addEventListener("click", () => {
            this.openMobileMenu(t, a);
          }),
          e &&
            e.addEventListener("click", (e) => {
              e.preventDefault(),
                e.stopPropagation(),
                this.closeMobileMenu(t, a);
            }),
          o &&
            o.addEventListener("click", () => {
              this.closeMobileMenu(t, a);
            }),
          document.querySelectorAll(".mobile-menu__link").forEach((e) => {
            e.addEventListener("click", () => {
              this.closeMobileMenu(t, a);
            });
          }),
          document.addEventListener("keydown", (e) => {
            "Escape" === e.key &&
              a.classList.contains("active") &&
              this.closeMobileMenu(t, a);
          })),
        document.querySelectorAll('a[href^="#"]')),
      o = document.querySelectorAll("#play-now-btn, #watch-trailer-btn");
    let n = (t) => {
      try {
        var e,
          a,
          o,
          n = document.querySelector(t);
        n &&
          ((a = (e = document.querySelector(".header")) ? e.offsetHeight : 0),
          (o = n.offsetTop - a),
          window.scrollTo({ top: o, behavior: "smooth" }));
      } catch (e) {
        try {
          var i = document.querySelector(t);
          i && i.scrollIntoView();
        } catch (e) {}
      }
    };
    e.forEach((t) => {
      t.addEventListener("click", (e) => {
        e.preventDefault(), n(t.getAttribute("href"));
      });
    }),
      o.forEach((t) => {
        t.addEventListener("click", (e) => {
          e.preventDefault(),
            "play-now-btn" === t.id
              ? n("#game")
              : "watch-trailer-btn" === t.id && n("#how-to-play");
        });
      }),
      this.setupCookieBar(),
      this.setupNewsModals(),
      this.setupContactForm(),
      this.setupHeaderScroll(),
      this.setupNavigationHighlighting();
  }
  setupCookieBar() {
    let e = document.getElementById("cookie-bar");
    var t = document.getElementById("cookie-accept"),
      a = document.getElementById("cookie-decline");
    e &&
      t &&
      a &&
      (localStorage.getItem("cookiesAccepted") || (e.style.display = "block"),
      t.addEventListener("click", () => {
        localStorage.setItem("cookiesAccepted", "true"),
          (e.style.display = "none");
      }),
      a.addEventListener("click", () => {
        localStorage.setItem("cookiesAccepted", "false"),
          (e.style.display = "none");
      }));
  }
  setupGameIframe() {}
  setupKeyboardControls(e) {}
  toggleFullscreen(e, t) {}
  setupNewsModals() {
    var e = document.getElementById("news-grid"),
      t = document.getElementById("news-modal"),
      a = document.getElementById("modal-overlay"),
      o = document.getElementById("modal-close");
    e &&
      t &&
      a &&
      o &&
      (a.addEventListener("click", () => this.closeModal()),
      o.addEventListener("click", () => this.closeModal()),
      document.addEventListener("keydown", (e) => {
        "Escape" === e.key && this.closeModal();
      }));
  }
  setupContactForm() {
    var e = document.getElementById("contact-form");
    e &&
      (e.addEventListener("submit", (e) => {
        e.preventDefault(), this.handleContactForm(e.target);
      }),
      e.querySelectorAll("input, textarea").forEach((t) => {
        t.addEventListener("animationstart", (e) => {
          "onAutoFillStart" === e.animationName &&
            t.classList.add("autofilled");
        }),
          t.addEventListener("input", () => {
            t.value
              ? t.classList.add("has-value")
              : t.classList.remove("has-value"),
              t.classList.remove("error", "invalid", "valid");
          }),
          t.addEventListener("focus", () => {
            t.classList.add("focused");
          }),
          t.addEventListener("blur", () => {
            t.classList.remove("focused");
          });
      }));
  }
  setupHeaderScroll() {
    let t = document.querySelector(".header"),
      a = window.scrollY;
    window.addEventListener("scroll", () => {
      var e = window.scrollY;
      100 < e ? t.classList.add("scrolled") : t.classList.remove("scrolled"),
        e > a && 200 < e
          ? t.classList.add("hidden")
          : t.classList.remove("hidden"),
        (a = e);
    });
  }
  setupNavigationHighlighting() {
    let n = document.querySelectorAll(".nav__link"),
      e = document.querySelectorAll("section[id]");
    var t = () => {
      let o = window.scrollY + 100;
      e.forEach((e) => {
        var t = e.offsetTop,
          a = e.offsetHeight,
          e = e.getAttribute("id");
        o >= t &&
          o < t + a &&
          (n.forEach((e) => e.classList.remove("active")),
          (t = document.querySelector(`.nav__link[href="#${e}"]`))) &&
          t.classList.add("active");
      });
    };
    window.addEventListener("scroll", t), t();
  }
  renderContent() {
    this.data &&
      (this.updateMetaTags(),
      this.renderHeader(),
      this.renderHero(),
      this.renderHowToPlay(),
      this.renderReviews(),
      this.renderNews(),
      this.renderDisclaimer(),
      this.renderContact(),
      this.renderFooter(),
      this.renderCookieBar());
  }
  updateMetaTags() {
    var e;
    this.data.meta &&
      ((document.title = this.data.meta.title),
      (e = document.querySelector('meta[name="description"]')) &&
        e.setAttribute("content", this.data.meta.description),
      (e = document.querySelector('meta[name="keywords"]'))) &&
      e.setAttribute("content", this.data.meta.keywords);
  }
  renderHeader() {
    if (this.data.header) {
      var e = document.querySelector(".logo__text"),
        t = document.querySelector(".logo__accent"),
        e =
          (e &&
            this.data.header.logo &&
            (e.textContent = this.data.header.logo.text),
          t &&
            this.data.header.logo &&
            (t.textContent = this.data.header.logo.accent),
          document.querySelectorAll(".nav__link")),
        t = document.querySelectorAll(".mobile-menu__link");
      if (this.data.header.navigation) {
        let o = this.data.header.navigation;
        e.forEach((e, t) => {
          var a = Object.keys(o);
          a[t] && (e.textContent = o[a[t]]);
        }),
          t.forEach((e, t) => {
            var a = Object.keys(o);
            a[t] && (e.textContent = o[a[t]]);
          });
      }
    }
  }
  renderHero() {
    var e, t, a, o, n;
    this.data.hero &&
      ((e = document.querySelector(".hero__badge-text")),
      (t = document.getElementById("hero-title")),
      (a = document.getElementById("hero-description")),
      (o = document.getElementById("play-now-btn")),
      (n = document.getElementById("watch-trailer-btn")),
      e &&
        (e.innerHTML = `
        <svg class="icon icon--music" aria-hidden="true">
          <use href="#music"></use>
        </svg>
        ${this.data.hero.badge}
      `),
      t && (t.textContent = this.data.hero.title),
      a && (a.textContent = this.data.hero.description),
      o &&
        this.data.hero.actions &&
        (o.querySelector(".btn__text").textContent =
          this.data.hero.actions.playNow),
      n &&
        this.data.hero.actions &&
        (n.querySelector(".btn__text").textContent =
          this.data.hero.actions.howToPlay),
      this.renderHeroFeatures(),
      this.renderGamePreview());
  }
  renderHeroFeatures() {
    var e;
    this.data.hero?.features &&
      (e = document.querySelector(".hero__features")) &&
      (e.innerHTML = this.data.hero.features
        .map(
          (e) => `
        <div class="hero__feature">
          <span class="hero__feature-icon">
            <svg class="icon icon--${e.icon}" aria-hidden="true">
              <use href="#${e.icon}"></use>
            </svg>
          </span>
          <span class="hero__feature-text">${e.text}</span>
        </div>
      `
        )
        .join(""));
  }
  renderGamePreview() {
    var e, t, a, o, n, i, s;
    this.data.hero?.gamePreview &&
      ((e = document.querySelector(".game-preview__title")) &&
        (e.textContent = this.data.hero.gamePreview.title),
      this.data.hero.gamePreview.stats) &&
      ((e = this.data.hero.gamePreview.stats),
      (t = document.querySelector(
        ".game-preview__stat:nth-child(1) .stat__value"
      )),
      (a = document.querySelector(
        ".game-preview__stat:nth-child(1) .stat__label"
      )),
      (o = document.querySelector(
        ".game-preview__stat:nth-child(2) .stat__value"
      )),
      (n = document.querySelector(
        ".game-preview__stat:nth-child(2) .stat__label"
      )),
      (i = document.querySelector(
        ".game-preview__stat:nth-child(3) .stat__value"
      )),
      (s = document.querySelector(
        ".game-preview__stat:nth-child(3) .stat__label"
      )),
      t && e.rating && (t.textContent = e.rating.value),
      a && e.rating && (a.textContent = e.rating.label),
      o && e.players && (o.textContent = e.players.value),
      n && e.players && (n.textContent = e.players.label),
      i && e.songs && (i.textContent = e.songs.value),
      s) &&
      e.songs &&
      (s.textContent = e.songs.label);
  }
  renderGame() {}
  renderHowToPlay() {
    var e, t, a;
    this.data.howToPlay &&
      ((e = document.getElementById("how-to-play-title")),
      (t = document.querySelector(".how-to-play .section-description")),
      (a = document.getElementById("steps-container")),
      e && (e.textContent = this.data.howToPlay.title),
      t && (t.textContent = this.data.howToPlay.description),
      a) &&
      this.data.howToPlay.steps &&
      (a.innerHTML = this.data.howToPlay.steps
        .map(
          (e) => `
          <div class="step-card">
            <div class="step-card__number">${e.step}</div>
            <div class="step-card__content">
              <h3 class="step-card__title">${e.title}</h3>
              <p class="step-card__description">${e.description}</p>
            </div>
          </div>
        `
        )
        .join(""));
  }
  renderReviews() {
    var e, t, a;
    this.data.reviews &&
      ((e = document.getElementById("reviews-title")),
      (t = document.querySelector(".reviews .section-description")),
      (a = document.getElementById("reviews-grid")),
      e && (e.textContent = this.data.reviews.title),
      t && (t.textContent = this.data.reviews.description),
      a) &&
      this.data.reviews.reviews &&
      (a.innerHTML = this.data.reviews.reviews
        .map(
          (e) => `
          <div class="review-card">
            <div class="review-card__header">
              <img src="${e.avatar}" alt="${
            e.player
          }" class="review-card__avatar" />
              <div class="review-card__info">
                <h4 class="review-card__player">${e.player}</h4>
                <div class="review-card__rating">
                  ${"â".repeat(e.rating)}${"â".repeat(5 - e.rating)}
                </div>
              </div>
            </div>
            <p class="review-card__comment">${e.comment}</p>
          </div>
        `
        )
        .join(""));
  }
  renderNews() {
    var e, t, a;
    this.data.news &&
      ((e = document.getElementById("news-title")),
      (t = document.querySelector(".news .section-description")),
      (a = document.getElementById("news-grid")),
      e && (e.textContent = this.data.news.title),
      t && (t.textContent = this.data.news.description),
      a) &&
      this.data.news.articles &&
      ((a.innerHTML = this.data.news.articles
        .map(
          (e) => `
          <div class="news-card" data-article-id="${e.id}">
            <div class="news-card__image">
              <img src="${e.image}" alt="${e.title}" />
            </div>
            <div class="news-card__content">
              <h3 class="news-card__title">${e.title}</h3>
              <p class="news-card__excerpt">${e.excerpt}</p>
              <div class="news-card__meta">
                              <span class="news-card__date">${new Date(
                                e.date
                              ).toLocaleDateString("en-US")}</span>
              <button class="btn btn--ghost news-card__read-more">Read More</button>
              </div>
            </div>
          </div>
        `
        )
        .join("")),
      document.querySelectorAll(".news-card").forEach((t) => {
        t.addEventListener("click", () => {
          var e = t.dataset.articleId;
          this.openNewsModal(e);
        });
      }));
  }
  renderDisclaimer() {
    var e, t, a;
    this.data.disclaimer &&
      ((e = document.querySelector(".disclaimer__title")),
      (t = document.querySelector(".disclaimer__description")),
      (a = document.querySelector(".disclaimer-content")),
      e && (e.textContent = this.data.disclaimer.title),
      t && (t.textContent = this.data.disclaimer.description),
      a) &&
      this.data.disclaimer.blocks &&
      (a.innerHTML = this.data.disclaimer.blocks
        .map(
          (e) => `
          <div class="disclaimer-block">
            <h3>${e.title}</h3>
            <p>${e.content}</p>
          </div>
        `
        )
        .join(""));
  }
  renderContact() {
    var e, t, a;
    this.data.contact &&
      ((a = document.getElementById("contact-title")),
      (e = document.querySelector(".contact .section-description")),
      (t = document.getElementById("contact-email")),
      a && (a.textContent = this.data.contact.title),
      e && (e.textContent = this.data.contact.description),
      t &&
        this.data.contact.info &&
        ((t.href = "mailto:" + this.data.contact.info.email),
        (t.textContent = this.data.contact.info.email)),
      (a = document.getElementById("contact-address")) &&
        this.data.contact.info?.address &&
        (a.textContent = this.data.contact.info.address),
      this.updateContactForm());
  }
  updateContactForm() {
    var e, t, a;
    this.data.contact?.form &&
      ((e = this.data.contact.form),
      (a = document.querySelector('label[for="contact-name"]')),
      (t = document.getElementById("contact-name")),
      a && (a.textContent = e.name.label),
      t && (t.placeholder = e.name.placeholder),
      (a = document.querySelector('label[for="contact-email-input"]')),
      (t = document.getElementById("contact-email-input")),
      a && (a.textContent = e.email.label),
      t && (t.placeholder = e.email.placeholder),
      (a = document.querySelector('label[for="contact-message"]')),
      (t = document.getElementById("contact-message")),
      a && (a.textContent = e.message.label),
      t && (t.placeholder = e.message.placeholder),
      (a = document.querySelector(".contact-form .btn--primary .btn__text"))) &&
      (a.textContent = e.submit);
  }
  renderFooter() {
    var e, t;
    this.data.footer &&
      ((e = document.querySelector(".footer__logo .logo__text")),
      (t = document.querySelector(".footer__logo .logo__accent")),
      e &&
        this.data.footer.brand &&
        (e.textContent = this.data.footer.brand.text),
      t &&
        this.data.footer.brand &&
        (t.textContent = this.data.footer.brand.accent),
      (e = document.querySelector(".footer__description")) &&
        (e.textContent = this.data.footer.description),
      this.updateFooterSections(),
      (t = document.getElementById("footer-copyright"))) &&
      (t.textContent = this.data.footer.copyright);
  }
  updateFooterSections() {
    if (this.data.footer?.sections) {
      var e = this.data.footer.sections;
      if (e.game) {
        var t = document.querySelector(
          ".footer__section:nth-child(1) .footer__title"
        );
        t && (t.textContent = e.game.title);
        let a = document.querySelectorAll(
          ".footer__section:nth-child(1) .footer__link"
        );
        e.game.links.forEach((e, t) => {
          a[t] && ((a[t].textContent = e.text), (a[t].href = e.href));
        });
      }
      if (e.community) {
        t = document.querySelector(
          ".footer__section:nth-child(2) .footer__title"
        );
        t && (t.textContent = e.community.title);
        let a = document.querySelectorAll(
          ".footer__section:nth-child(2) .footer__link"
        );
        e.community.links.forEach((e, t) => {
          a[t] &&
            ((a[t].textContent = e.text), (a[t].href = e.href), e.external) &&
            ((a[t].target = "_blank"), (a[t].rel = "noopener"));
        });
      }
      if (e.legal) {
        t = document.querySelector(
          ".footer__section:nth-child(3) .footer__title"
        );
        t && (t.textContent = e.legal.title);
        let a = document.querySelectorAll(
          ".footer__section:nth-child(3) .footer__link"
        );
        e.legal.links.forEach((e, t) => {
          a[t] && ((a[t].textContent = e.text), (a[t].href = e.href));
        });
      }
    }
  }
  renderCookieBar() {
    var e, t, a;
    this.data.cookieBar &&
      ((e = document.getElementById("cookie-message")),
      (t = document.getElementById("cookie-accept")),
      (a = document.getElementById("cookie-decline")),
      e && (e.textContent = this.data.cookieBar.message),
      t && (t.textContent = this.data.cookieBar.accept),
      a) &&
      (a.textContent = this.data.cookieBar.decline);
  }
  openNewsModal(t) {
    var e,
      a,
      o,
      n,
      i,
      s = this.data.news.articles.find((e) => e.id == t);
    s &&
      ((e = document.getElementById("news-modal")),
      (a = document.getElementById("modal-title")),
      (o = document.getElementById("modal-image")),
      (n = document.getElementById("modal-date")),
      (i = document.getElementById("modal-body")),
      e) &&
      a &&
      o &&
      n &&
      i &&
      ((a.textContent = s.title),
      (o.src = s.image),
      (o.alt = s.title),
      (n.textContent = new Date(s.date).toLocaleDateString("en-US")),
      (i.textContent = s.content),
      e.classList.add("active"),
      document.body.classList.add("modal-open"));
  }
  closeModal() {
    var e = document.getElementById("news-modal");
    e &&
      (e.classList.remove("active"),
      document.body.classList.remove("modal-open"));
  }
  showNotification(e, t = "info") {
    let a = document.createElement("div");
    (a.className = "notification notification--" + t),
      (a.innerHTML = `
      <div class="notification__content">
        <span class="notification__message">${e}</span>
        <button class="notification__close" aria-label="Close notification">Ã</button>
      </div>
    `),
      document.body.appendChild(a);
    let o = () => {
      a.classList.add("closing"),
        setTimeout(() => {
          a.parentNode && a.remove();
        }, 300);
    };
    setTimeout(() => {
      a.parentNode && o();
    }, 5e3);
    let n = a.querySelector(".notification__close");
    n && n.addEventListener("click", o);
  }
  async handleContactForm(e) {
    var t = new FormData(e),
      t = Object.fromEntries(t),
      a = (this.clearValidationStates(e), []),
      o = e.querySelector("#contact-name"),
      n = e.querySelector("#contact-email-input"),
      i = e.querySelector("#contact-message");
    if (
      (!t.name || t.name.trim().length < 2
        ? (a.push("Name must contain at least 2 characters"),
          o && (o.classList.add("error"), o.classList.remove("valid")))
        : o && (o.classList.add("valid"), o.classList.remove("error")),
      t.email && t.email.includes("@")
        ? n && (n.classList.add("valid"), n.classList.remove("error"))
        : (a.push("Please enter a valid email"),
          n && (n.classList.add("error"), n.classList.remove("valid"))),
      !t.message || t.message.trim().length < 10
        ? (a.push("Message must contain at least 10 characters"),
          i && (i.classList.add("error"), i.classList.remove("valid")))
        : i && (i.classList.add("valid"), i.classList.remove("error")),
      0 < a.length)
    )
      this.showNotification("Validation errors:\n" + a.join("\n"), "error");
    else {
      (o = e.querySelector(".form__submit")), (n = o.innerHTML);
      (o.innerHTML = `<span class="btn__text">${this.data.contact.form.sending}</span><span class="btn__icon">ð¤</span>`),
        (o.disabled = !0);
      try {
        await new Promise((e) => setTimeout(e, 2e3)),
          this.showNotification(this.data.contact.form.success, "success"),
          e.reset();
      } catch (e) {
        this.showNotification(this.data.contact.form.error, "error");
      } finally {
        (o.innerHTML = n), (o.disabled = !1);
      }
    }
  }
  clearValidationStates(e) {
    e.querySelectorAll("input, textarea").forEach((e) => {
      e.classList.remove("error", "invalid", "valid");
    });
  }
  openMobileMenu(e, t) {
    try {
      var a = window.scrollY;
      e.classList.add("active"),
        t.classList.add("active"),
        document.body.classList.add("menu-open"),
        (document.body.style.overflow = "hidden"),
        (document.body.style.position = "fixed"),
        (document.body.style.top = `-${a}px`),
        (document.body.style.width = "100%"),
        (document.body.dataset.scrollY = a);
    } catch (e) {}
  }
  closeMobileMenu(e, t) {
    try {
      e.classList.remove("active"),
        t.classList.remove("active"),
        document.body.classList.remove("menu-open");
      var a = document.body.dataset.scrollY;
      (document.body.style.overflow = ""),
        (document.body.style.position = ""),
        (document.body.style.top = ""),
        (document.body.style.width = ""),
        a &&
          (window.scrollTo(0, parseInt(a)),
          delete document.body.dataset.scrollY);
    } catch (e) {}
  }
  loadDataWithXHR() {
    return new Promise((t, a) => {
      let o = new XMLHttpRequest();
      o.open("GET", "data.json", !0),
        (o.timeout = 5e3),
        (o.onload = function () {
          if (200 === o.status)
            try {
              var e = JSON.parse(o.responseText);
              t(e);
            } catch (e) {
              a(new Error("Failed to parse JSON: " + e.message));
            }
          else a(new Error("XHR failed with status: " + o.status));
        }),
        (o.onerror = function () {
          a(new Error("XHR request failed"));
        }),
        (o.ontimeout = function () {
          a(new Error("XHR request timed out"));
        }),
        o.send();
    });
  }
  initializeComponents() {}
}
